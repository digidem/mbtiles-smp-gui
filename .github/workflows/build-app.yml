name: Build Application

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
        description: 'Operating system to run on'
      build-type:
        required: true
        type: string
        description: 'Type of build (mac, linux, win)'

jobs:
  build:
    runs-on: ${{ inputs.os }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          # Install rimraf explicitly for the clean script
          npm install rimraf@latest

      - name: Build Electron app for macOS
        if: inputs.build-type == 'mac'
        run: |
          # Check environment before building
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"

          # Ensure node_modules/.bin is in PATH
          export PATH="$PATH:$(pwd)/node_modules/.bin"
          echo "PATH: $PATH"

          # Run the package script
          npm run package:mac

          # Check the build output
          find ./release/build -type f | sort

      - name: Build Electron app for Linux
        if: inputs.build-type == 'linux'
        run: |
          # Check environment before building
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Python version: $(python3 --version)"

          # Ensure node_modules/.bin is in PATH
          export PATH="$PATH:$(pwd)/node_modules/.bin"
          echo "PATH: $PATH"

          # Check if better-sqlite3 is installed in release/app
          if [ -d "release/app/node_modules/better-sqlite3" ]; then
            echo "better-sqlite3 is installed in release/app"
            ls -la release/app/node_modules/better-sqlite3
          else
            echo "better-sqlite3 is NOT installed in release/app"
          fi

          # Run the package script with increased verbosity
          NODE_DEBUG=electron-builder,electron-rebuild npm run package:linux

          # Check the build output
          find ./release/build -type f | sort

      - name: Build Electron app for Windows
        if: inputs.build-type == 'win'
        run: |
          # Check environment before building
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"

          # Ensure node_modules/.bin is in PATH (Windows syntax)
          $env:PATH += ";$(Get-Location)\node_modules\.bin"
          echo "PATH: $env:PATH"

          # Run the package script
          npm run package:win

          # Check the build output
          Get-ChildItem -Path .\release\build -Recurse -File | ForEach-Object { $_.FullName }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.os }}
          path: |
            ./release/build/*.AppImage
            ./release/build/*.exe
            ./release/build/*.dmg
            ./release/build/*.zip
            ./release/build/*.msi
          if-no-files-found: ignore
